from app.models.transaction import TransactionCategoryModel
from app.models.finances import FinancesEducate


CLASSES = [
    "Аксессуары",
    "Аренда",
    "Еда",
    "Зарплата",
    "Одежда и обувь",
    "Разное",
    "Транспорт",
]

IS_DEP = [
    False,
    False,
    False,
    True,
    False,
    False,
    False,
]
  
DATA = [
  {
    "title": "Начните вести бюджет",
    "description": "Записывайте все доходы и расходы хотя бы в течение месяца, чтобы понять, куда уходят деньги."
  },
  {
    "title": "Правило 50/30/20",
    "description": "50% — на нужды, 30% — на желания, 20% — в сбережения. Простой и эффективный принцип."
  },
  {
    "title": "Откладывайте в начале, а не в конце",
    "description": "Сразу после получения дохода откладывайте часть, а не то, что «останется»."
  },
  {
    "title": "Сделайте финансовую подушку",
    "description": "Накопите резерв в размере 3–6 месяцев расходов, чтобы чувствовать себя уверенно."
  },
  {
    "title": "Откажитесь от импульсивных покупок",
    "description": "Придержите покупку на 24 часа — если всё ещё хотите, тогда решайте."
  },
  {
    "title": "Сравнивайте цены перед покупкой",
    "description": "Используйте агрегаторы и кэшбэк-сервисы, чтобы экономить."
  },
  {
    "title": "Автоматизируйте сбережения",
    "description": "Настройте автоперевод части дохода на отдельный счёт или накопительный вклад."
  },
  {
    "title": "Следите за подписками",
    "description": "Регулярно проверяйте и отменяйте ненужные платные подписки."
  },
  {
    "title": "Ведите учёт долгов",
    "description": "Записывайте кому и сколько должны, и в какие сроки нужно вернуть."
  },
  {
    "title": "Изучите разницу между плохим и хорошим долгом",
    "description": "Плохой — на потребление, хороший — на инвестиции, образование, развитие."
  },
  {
    "title": "Не используйте кредитку для ежедневных трат",
    "description": "Это может привести к росту долга. Лучше использовать дебетовую карту."
  },
  {
    "title": "Рассчитайте стоимость кредита до оформления",
    "description": "Учитывайте не только ставку, но и комиссии, страховку и другие условия."
  },
  {
    "title": "Начните с простых инвестиций",
    "description": "Облигации, ETF — разумный старт без высоких рисков."
  },
  {
    "title": "Не инвестируйте в то, чего не понимаете",
    "description": "Сначала разберитесь, потом вкладывайте. Это правило №1 инвестора."
  },
  {
    "title": "Следите за финансовыми новостями",
    "description": "Это поможет вам принимать более обоснованные решения."
  },
  {
    "title": "Составьте финансовый план на год",
    "description": "Цели, доходы, расходы, сбережения — план помогает держать курс."
  },
  {
    "title": "Делайте обзоры расходов каждый месяц",
    "description": "Сравнивайте с планом, ищите слабые места."
  },
  {
    "title": "Не держите все деньги в одном месте",
    "description": "Диверсификация — основа финансовой безопасности."
  },
  {
    "title": "Используйте бюджетные приложения",
    "description": "Например, CoinKeeper, ZenMoney, Toshl, чтобы удобно отслеживать расходы."
  },
  {
    "title": "Планируйте крупные покупки заранее",
    "description": "Избегайте кредитов на бытовую технику и гаджеты."
  }
]

async def create_categories() -> None:
    for name, is_deposit in zip(CLASSES, IS_DEP):
        category, created = await TransactionCategoryModel.get_or_create(
            name=name,
            defaults={'is_deposit': is_deposit}
        )
    print("Все категории были успешно загружены")
    
  
async def create_educate() -> None:
    for item in DATA:
      temp = await FinancesEducate.get_or_create(
            title=str(item['title']),
            description=str(item['description'])
      )
    print("Все советы были успешно загружены")